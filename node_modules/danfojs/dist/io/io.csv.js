"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.$toCSV = exports.$readCSV = void 0;

var _papaparse = _interopRequireDefault(require("papaparse"));

var _index = require("../index");

/**
*  @license
* Copyright 2021, JsData. All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ==========================================================================
*/
const $readCSV = async (filePath, options) => {
  options = {
    header: true,
    dynamicTyping: true,
    ...options
  };
  return new Promise(resolve => {
    _papaparse.default.parse(filePath, { ...options,
      download: true,
      complete: results => {
        const df = new _index.DataFrame(results.data);
        resolve(df);
      }
    });
  });
};

exports.$readCSV = $readCSV;

const $toCSV = (df, options) => {
  let {
    fileName,
    download,
    sep,
    header
  } = {
    fileName: "output.csv",
    sep: ",",
    header: true,
    download: true,
    ...options
  };

  if (df.$isSeries) {
    const csv = df.values.join(sep);

    if (download) {
      if (!fileName.endsWith(".csv")) {
        fileName = fileName + ".csv";
      }

      $downloadFileInBrowser(csv, fileName);
    } else {
      return csv;
    }
  } else {
    const rows = df.values;
    let csvStr = header === true ? `${df.columns.join(sep)}\n` : "";

    for (let i = 0; i < rows.length; i++) {
      const row = `${rows[i].join(sep)}\n`;
      csvStr += row;
    }

    if (download) {
      if (!fileName.endsWith(".csv")) {
        fileName = fileName + ".csv";
      }

      $downloadFileInBrowser(csvStr, fileName);
    } else {
      return csvStr;
    }
  }
};

exports.$toCSV = $toCSV;

const $downloadFileInBrowser = (content, fileName) => {
  var hiddenElement = document.createElement('a');
  hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(content);
  hiddenElement.target = '_blank';
  hiddenElement.download = fileName;
  hiddenElement.click();
};